"""
‚úÖ CHECKLIST PARA AUTOMATIZACI√ìN EN PYTHON (EXPORTAR EXCEL)

Estas 3 preguntas son claves para evitar errores comunes cuando trabajas con:
- exportaci√≥n de datos
- conexi√≥n a bases de datos
- generaci√≥n de archivos Excel

-----------------------------------
1Ô∏è‚É£ ¬øYa export√© el archivo antes de usarlo o modificarlo?
-----------------------------------

‚úîÔ∏è Significa: Aseg√∫rate de haber ejecutado df.to_excel() antes de intentar abrir o modificar el archivo con openpyxl.

Ejemplo correcto:
    df.to_excel(nombre_archivo, index=False)
    wb = load_workbook(nombre_archivo)

Si te saltas df.to_excel(), saldr√° FileNotFoundError.

-----------------------------------
2Ô∏è‚É£ ¬øEstoy usando la misma variable (nombre_archivo o archivo_excel) en todos lados?
-----------------------------------

‚úîÔ∏è Significa: Usa una √∫nica variable para referirte al nombre del archivo Excel.

Ejemplo correcto:
    archivo_excel = "ventas.xlsx"
    df.to_excel(archivo_excel)
    convertir_a_tabla_excel(archivo_excel, "MiTabla")

‚ùå Error com√∫n:
    df.to_excel(archivo_excel)
    convertir_a_tabla_excel(nombre_archivo)  # nombre_archivo no existe

-----------------------------------
3Ô∏è‚É£ ¬øEn qu√© orden se ejecuta cada parte del script?
-----------------------------------

‚úîÔ∏è El orden importa mucho. Este es el flujo correcto:

1. Conectar a la base de datos = conexion = mysql.connector.connect
2. Ejecutar consulta SQL
3. Ejecutar la consulta y convertir a DataFrame = df = pd.read_sql(consulta, conexion)
4. Exportar o Guardar con df.to_excel()
5. Modificar (agregar tabla, estilo, etc)
6. Cerrar conexi√≥n

‚ùå Saltarse o invertir pasos genera errores que a veces son dif√≠ciles de detectar.

-----------------------------------

üß† Recomendaci√≥n final:
Pega este archivo como referencia en tu carpeta /utilidades o tu recetario.
Siempre cons√∫ltalo si algo te falla con archivos, conexiones o nombres mal definidos.
"""
